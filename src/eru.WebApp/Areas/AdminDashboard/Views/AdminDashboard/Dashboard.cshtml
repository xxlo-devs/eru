@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@using Microsoft.AspNetCore.Localization
@using Microsoft.AspNetCore.Mvc.Localization
@using Microsoft.Extensions.Configuration
@{
    Layout = null;
    var culture = Context.Features.Get<IRequestCultureFeature>().RequestCulture.Culture.Name;
    //TODO Write how to setup SEQ in docs
    var seqServer = Configuration.GetSection("Serilog:WriteTo")?.GetChildren()?.Skip(2).FirstOrDefault()?.GetSection("Args:serverUrl")?.Value;
}
@inject IViewLocalizer Localizer
@inject IConfiguration Configuration
<!DOCTYPE html>

<html lang="@culture">
<head>
    <title>@Localizer["title"]</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.0/css/bulma.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.0.0/animate.min.css"/>
    <link href="https://fonts.googleapis.com/css2?family=Quicksand:wght@300;400;500;600;700&display=swap" rel="stylesheet">
</head>
<body>
<div id="wrapper">
    <nav class="navbar" role="navigation" aria-label="main navigation">
        <div class="navbar-brand">
            <a class="navbar-item has-text-weight-bold" href="/admin">ERU</a>
    
            <a role="button" class="navbar-burger burger" aria-label="menu" aria-expanded="false" data-target="navbar">
                <span aria-hidden="true"></span>
                <span aria-hidden="true"></span>
                <span aria-hidden="true"></span>
            </a>
        </div>
    
        <div id="navbar" class="navbar-menu">
            <div class="navbar-start">
                <a class="navbar-item" href="/jobs">
                    Hangfire
                </a>
                @if (!string.IsNullOrEmpty(seqServer))
                {
                    <a class="navbar-item" href="@seqServer">
                        Logs
                    </a>
                }
            </div>
        </div>
    </nav>
    <div class="tile is-ancestor">
        <div class="tile is-vertical">
            <div class="tile is-child box has-text-centered">
                <div class="field">
                    <label for="auto-refresh" class="has-text-weight-bold">Auto Refresh</label>
                    <input id="auto-refresh" type="checkbox" name="auto-refresh-status" class="switch" onchange="localStorage.setItem('auto-refresh', this.checked)"/>
                </div>
            </div>
            <div class="tile is-child box">
                <p class="title has-text-centered">Stats</p>
                <table class="table center-table is-striped">
                    <thead>
                    <tr>
                        <th>Name</th>
                        <th>Value</th>
                    </tr>
                    </thead>
                    <tbody>
                    <tr>
                        <td>Uptime</td>
                        <td id="uptime">Loading...</td>
                    </tr>
                    <tr>
                        <td>Subscribers</td>
                        <td id="subscribers">Loading...</td>
                    </tr>
                    </tbody>
                </table>
            </div>
            <div class="tile is-child box">
                <p class="title has-text-centered">Classes</p>
                <table class="table center-table is-striped" id="classes-table">
                    <thead>
                    <tr>
                        <th>Class Name</th>
                        <th>Subscribers</th>
                    </tr>
                    </thead>
                    <tbody>
                    
                    </tbody>
                </table>
                <div class="has-text-centered">
                    <button class="button" onclick="createClass()">Add class</button>
                    <button class="button" onclick="removeClass()">Remove class</button>
                </div>
            </div>
        </div>
        <div class="tile is-vertical">
            <div class="tile is-child box">
                <p class="title has-text-centered">Health Checks</p>
            </div>
        </div>
    </div>
</div>
<footer class="footer">
    <div class="content has-text-centered">
        <p>
            <a href="https://github.com/xxlo-devs/eru">
                <strong>eru</strong>
            </a> by <a href="https://github.com/xxlo-devs">xxlo-devs</a>
            (<a href="https://github.com/KanarekLife">KanarekLife (Stanisław Nieradko)</a> and <a href="https://github.com/bazik33">Bazik33</a>) in 2020.
        </p>
        <p>
            Released under <a href="https://github.com/xxlo-devs/eru/blob/master/LICENSE">MIT License</a>. We ❤️ Open-Source.
        </p>
        <p>
            <a href="?culture=pl"><img width="40px" src="pictures/flags/polish_flag.svg" alt="Język Polski"/></a>
            <a href="?culture=en"><img width="40px" src="pictures/flags/uk_flag.svg" alt="English"/></a>
        </p>
    </div>
</footer>
<style type="text/css" media="screen">
    body {
        display: flex;
        min-height: 100vh;
        flex-direction: column;
    }
     
    #wrapper {
        flex: 1;
    }
    
    .center-table {
          margin-left: auto;
          margin-right: auto;
    }
</style>
<script>
document.addEventListener('DOMContentLoaded', () => {

  // Get all "navbar-burger" elements
  const $navbarBurgers = Array.prototype.slice.call(document.querySelectorAll('.navbar-burger'), 0);

  // Check if there are any navbar burgers
  if ($navbarBurgers.length > 0) {

    // Add a click event on each of them
    $navbarBurgers.forEach( el => {
      el.addEventListener('click', () => {

        // Get the target from the "data-target" attribute
        const target = el.dataset.target;
        const $target = document.getElementById(target);

        // Toggle the "is-active" class on both the "navbar-burger" and the "navbar-menu"
        el.classList.toggle('is-active');
        $target.classList.toggle('is-active');

      });
    });
  }
});
document.querySelector('#auto-refresh').checked = localStorage.getItem('auto-refresh') === 'true';
async function refreshData(force = false) {
    if (localStorage.getItem('auto-refresh') === 'true' || force) {
            await fetch('admin/status')
                .then(res => {
                    if (res.ok) {
                        res.json().then(json => {
                            const {days, hours, minutes, seconds } = json.uptime;
                            document.querySelector('#uptime').textContent = `${days} Days ${hours} Hours ${minutes} Minutes ${seconds} Seconds`;
                            document.querySelector('#subscribers').textContent = json.subscribers;
                            const classesTable = document.querySelector('#classes-table>tbody');
                            for (const property in json.classes) {
                                const name = property;
                                const subscribers = json.classes[property];
                                if (Array.prototype.slice.call(classesTable.children).filter(x=>x.innerText.startsWith(name)).length === 0) {
                                    const row = classesTable.insertRow(0);
                                    row.insertCell(0).textContent = name;
                                    row.insertCell(1).textContent = subscribers;
                                }
                            }
                        })
                    }else {
                        console.error(`Couldn't load data from server. ${res.statusText} ${res.status}`);
                    }
                })
    }
}
setInterval(refreshData, 1000);
refreshData(true);
async function createClass() {
    const name = prompt('Enter class name: ');
    if (name) {
        await fetch(`/admin/class?name=${name}`, {
            method: 'POST'
        }).then(res => {
            if (res.ok) {
                refreshData(true);
            }else {
                alert(`Couldn't create new class with given name!`);
            }
        });
    }
}
async function removeClass() {
    const name = prompt('Enter class name: ');
    if (name) {
        await fetch(`/admin/class?name=${name}`, {
            method: 'DELETE'
        }).then(res => {
            if (res.ok) {
                refreshData(true);
            }else {
                alert(`Couldn't remove class with given name!`);
            }
        });
    }
}
</script>
</body>
</html>