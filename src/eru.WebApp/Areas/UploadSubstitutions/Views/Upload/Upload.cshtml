@using Microsoft.AspNetCore.Localization
@using Microsoft.AspNetCore.Mvc.Localization
@{
    Layout = null;
    var culture = Context.Features.Get<IRequestCultureFeature>().RequestCulture.Culture.Name;
}
@inject IViewLocalizer Localizer
<!DOCTYPE html>

<html lang="@culture">
<head>
    <title>@Localizer["title"]</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.0/css/bulma.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.0.0/animate.min.css"/>
    <link href="https://fonts.googleapis.com/css2?family=Quicksand:wght@300;400;500;600;700&display=swap" rel="stylesheet">
</head>
<body>
<svg class="chroma" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1440 320">
    <path fill="#ff5500" fill-opacity="1" d="M0,192L180,288L360,192L540,192L720,256L900,160L1080,288L1260,64L1440,224L1440,0L1260,0L1080,0L900,0L720,0L540,0L360,0L180,0L0,0Z"></path>
</svg>
<div id="wrapper">
    <section class="hero">
        <div class="container is-half">
            <h1 class="is-size-1 title animate__animated animate__lightSpeedInRight">@Localizer["title"]</h1>
        </div>
    </section>
    <section id="form-container" class="section">
        <div class="container">
            <div class="field">
                <label class="label">@Localizer["api-key"]</label>
                <div class="control has-icons-left">
                    <span class="icon is-small is-left">
                        <box-icon name="lock-alt"></box-icon>
                    </span>
                    <input id="key-input" class="input" type="password" placeholder="@Localizer["api-key"]"/>
                </div>
            </div>
            <div class="field">
                <label class="label">@Localizer["file"]</label>
                <div class="file has-name is-fullwidth">
                    <label class="file-label">
                        <input id="file-input" class="file-input" type="file" name="substitutions" accept="application/xml"/>
                        <span class="file-cta">
                            <span class="file-icon">
                                <box-icon name="cloud-upload"></box-icon>
                            </span>
                            <span class="file-label">
                                @Localizer["choose-file"]
                            </span>
                        </span>
                        <span id="file-name" class="file-name"></span>
                    </label>
                </div>
            </div>
            <div class="field is-grouped">
                <div class="control">
                    <button id="submit-button" class="button">@Localizer["submit"]</button>
                </div>
                <div class="control">
                    <button id="cancel-button" class="button is-light">@Localizer["cancel"]</button>
                </div>
            </div>
        </div>
    </section>
</div>
<footer class="footer">
    <div class="content has-text-centered">
        <p>
            <a href="https://github.com/xxlo-devs/eru">
                <strong>eru</strong>
            </a> by <a href="https://github.com/xxlo-devs">xxlo-devs</a>
            (<a href="https://github.com/KanarekLife">KanarekLife (Stanisław Nieradko)</a> and <a href="https://github.com/bazik33">Bazik33</a>) in 2020.
        </p>
        <p>
            Released under <a href="https://github.com/xxlo-devs/eru/blob/master/LICENSE">MIT License</a>. We ❤️ Open-Source.
        </p>
        <p>
            <a href="?culture=pl"><img width="40px" src="pictures/flags/polish_flag.svg" alt="Język Polski"/></a>
            <a href="?culture=en"><img width="40px" src="pictures/flags/uk_flag.svg" alt="English"/></a>
        </p>
    </div>
</footer>
<style type="text/css" media="screen">
    body {
        display: flex;
        min-height: 100vh;
        flex-direction: column;
    }
     
    #wrapper {
        flex: 1;
    }
    
    .chroma>path {
        fill: black;
        animation: chroma 8s linear infinite alternate both;
    }
    
    @@keyframes chroma {
       0% {
         fill: #19dcea;
       }
       100% {
         fill: #b22cff;
       }
     }
     
    .title {
       font-family: 'Quicksand', sans-serif;
    }
</style>
<script>
document.getElementById('file-input').onchange = displayFileName;
document.getElementById('cancel-button').onclick = cancel;
document.getElementById('submit-button').onclick = submit;

document.addEventListener('DOMContentLoaded', () => {
  (document.querySelectorAll('.notification .delete') || []).forEach(($delete) => {
    const $notification = $delete.parentNode;

    $delete.addEventListener('click', () => {
      $notification.parentNode.removeChild($notification);
    });
  });
});

function displayFileName() {
    const arr = document.getElementById('file-input').value.split('\\');
    document.getElementById('file-name').textContent = arr[arr.length-1];
}

function cancel() {
    document.getElementById('file-name').textContent = "";
    document.getElementById('file-input').value = null;
    document.getElementById('key-input').value = "";
}

function submit() {
    const file = document.getElementById('file-input').files[0];
    if(file) {
        const reader = new FileReader();
        reader.readAsText(file, 'CP1250');
        reader.onload = async function (evt) {
            const data = evt.target.result.replace(/[\w\W]+?\n+?/,"");
            await fetch(window.location.href, {
                method: 'POST',
                body: data,
                headers: {
                    'Content-Type': 'application/xml',
                    'Api-Key': document.getElementById('key-input').value
                }
            }).then(response => {
               if(response.ok) {
                   addNotification('@Localizer["upload-succeed"]', ['is-success']);
                   cancel();
               }else {
                   cancel();
                   response.text().then(text => addNotification(text, ['is-danger']));
               }
            });
        }
    }
}

function addNotification(content, classes) {
    let notification = document.createElement('div');
    notification.classList.add('notification');
    classes.forEach(c => notification.classList.add(c));
    let closeButton = document.createElement('button');
    closeButton.classList.add('delete');
    closeButton.onclick = function() {
        notification.parentNode.removeChild(notification);
    };
    notification.append(closeButton);
    notification.append(content);
    document.getElementById('form-container').prepend(notification);
}
</script>
<script src="https://unpkg.com/boxicons@latest/dist/boxicons.js"></script>
</body>
</html>